{"ast":null,"code":"// Servicio para manejar las peticiones HTTP con autenticación\nconst API_BASE_URL = 'http://localhost:8080/api';\n\n// Función para obtener las credenciales de autenticación\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem('authToken');\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n\n  // Temporalmente comentado para probar sin autenticación\n  // if (token) {\n  //   headers['Authorization'] = `Bearer ${token}`;\n  // }\n\n  return headers;\n};\n\n// Función para obtener las credenciales para archivos (sin Content-Type)\nconst getFileAuthHeaders = () => {\n  const token = localStorage.getItem('authToken');\n  const headers = {};\n\n  // Temporalmente comentado para probar sin autenticación\n  // if (token) {\n  //   headers['Authorization'] = `Bearer ${token}`;\n  // }\n\n  return headers;\n};\n\n// Función genérica para peticiones GET\nexport const apiGet = async endpoint => {\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n    method: 'GET',\n    headers: getAuthHeaders()\n  });\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n  return response.json();\n};\n\n// Función genérica para peticiones POST\nexport const apiPost = async (endpoint, data) => {\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n    method: 'POST',\n    headers: getAuthHeaders(),\n    body: data ? JSON.stringify(data) : undefined\n  });\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n  return response.json();\n};\n\n// Función específica para subir archivos CSV\nexport const uploadCsvFile = async file => {\n  const formData = new FormData();\n  formData.append('file', file);\n  const response = await fetch(`${API_BASE_URL}/trips/import-csv`, {\n    method: 'POST',\n    headers: getFileAuthHeaders(),\n    body: formData\n  });\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`Error en la importación: ${errorText}`);\n  }\n  return response.json();\n};\n\n// Funciones específicas para viajes\nexport const tripsApi = {\n  getAll: () => apiGet('/trips'),\n  getById: id => apiGet(`/trips/${id}`),\n  create: trip => apiPost('/trips', trip),\n  update: (id, trip) => apiPost(`/trips/${id}`, trip),\n  delete: id => apiPost(`/trips/${id}/delete`),\n  getByDate: date => apiGet(`/trips/date/${date}`),\n  getByOrigin: origin => apiGet(`/trips/origin/${origin}`),\n  getByDestination: destination => apiGet(`/trips/destination/${destination}`),\n  getByCompany: company => apiGet(`/trips/company/${company}`),\n  getByDriver: driver => apiGet(`/trips/driver/${driver}`),\n  getByStatus: status => apiGet(`/trips/status/${status}`),\n  getRevenueByDate: date => apiGet(`/trips/revenue/date/${date}`),\n  getRevenueByCompany: date => apiGet(`/trips/revenue/company/${date}`),\n  getRevenueByRoute: date => apiGet(`/trips/revenue/route/${date}`),\n  importCsv: uploadCsvFile\n};","map":{"version":3,"names":["API_BASE_URL","getAuthHeaders","token","localStorage","getItem","headers","getFileAuthHeaders","apiGet","endpoint","response","fetch","method","ok","Error","status","json","apiPost","data","body","JSON","stringify","undefined","uploadCsvFile","file","formData","FormData","append","errorText","text","tripsApi","getAll","getById","id","create","trip","update","delete","getByDate","date","getByOrigin","origin","getByDestination","destination","getByCompany","company","getByDriver","driver","getByStatus","getRevenueByDate","getRevenueByCompany","getRevenueByRoute","importCsv"],"sources":["C:/Users/pasaj/Desktop/pullman-payment-system/frontend/src/services/api.ts"],"sourcesContent":["// Servicio para manejar las peticiones HTTP con autenticación\r\nconst API_BASE_URL = 'http://localhost:8080/api';\r\n\r\n// Función para obtener las credenciales de autenticación\r\nconst getAuthHeaders = () => {\r\n  const token = localStorage.getItem('authToken');\r\n  const headers: Record<string, string> = {\r\n    'Content-Type': 'application/json',\r\n  };\r\n  \r\n  // Temporalmente comentado para probar sin autenticación\r\n  // if (token) {\r\n  //   headers['Authorization'] = `Bearer ${token}`;\r\n  // }\r\n  \r\n  return headers;\r\n};\r\n\r\n// Función para obtener las credenciales para archivos (sin Content-Type)\r\nconst getFileAuthHeaders = () => {\r\n  const token = localStorage.getItem('authToken');\r\n  const headers: Record<string, string> = {};\r\n  \r\n  // Temporalmente comentado para probar sin autenticación\r\n  // if (token) {\r\n  //   headers['Authorization'] = `Bearer ${token}`;\r\n  // }\r\n  \r\n  return headers;\r\n};\r\n\r\n// Función genérica para peticiones GET\r\nexport const apiGet = async (endpoint: string) => {\r\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n    method: 'GET',\r\n    headers: getAuthHeaders(),\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    throw new Error(`HTTP error! status: ${response.status}`);\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n\r\n// Función genérica para peticiones POST\r\nexport const apiPost = async (endpoint: string, data?: any) => {\r\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n    method: 'POST',\r\n    headers: getAuthHeaders(),\r\n    body: data ? JSON.stringify(data) : undefined,\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    throw new Error(`HTTP error! status: ${response.status}`);\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n\r\n// Función específica para subir archivos CSV\r\nexport const uploadCsvFile = async (file: File) => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  \r\n  const response = await fetch(`${API_BASE_URL}/trips/import-csv`, {\r\n    method: 'POST',\r\n    headers: getFileAuthHeaders(),\r\n    body: formData,\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    throw new Error(`Error en la importación: ${errorText}`);\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n\r\n// Funciones específicas para viajes\r\nexport const tripsApi = {\r\n  getAll: () => apiGet('/trips'),\r\n  getById: (id: number) => apiGet(`/trips/${id}`),\r\n  create: (trip: any) => apiPost('/trips', trip),\r\n  update: (id: number, trip: any) => apiPost(`/trips/${id}`, trip),\r\n  delete: (id: number) => apiPost(`/trips/${id}/delete`),\r\n  getByDate: (date: string) => apiGet(`/trips/date/${date}`),\r\n  getByOrigin: (origin: string) => apiGet(`/trips/origin/${origin}`),\r\n  getByDestination: (destination: string) => apiGet(`/trips/destination/${destination}`),\r\n  getByCompany: (company: string) => apiGet(`/trips/company/${company}`),\r\n  getByDriver: (driver: string) => apiGet(`/trips/driver/${driver}`),\r\n  getByStatus: (status: string) => apiGet(`/trips/status/${status}`),\r\n  getRevenueByDate: (date: string) => apiGet(`/trips/revenue/date/${date}`),\r\n  getRevenueByCompany: (date: string) => apiGet(`/trips/revenue/company/${date}`),\r\n  getRevenueByRoute: (date: string) => apiGet(`/trips/revenue/route/${date}`),\r\n  importCsv: uploadCsvFile,\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}