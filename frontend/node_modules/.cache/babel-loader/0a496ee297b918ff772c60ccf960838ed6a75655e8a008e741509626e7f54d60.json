{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport { useState } from 'react';\nimport { apiGet } from '../services/api';\n// Cambia esta URL por la de tu backend\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api/reports';\nexport function useReportesApi() {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Obtener reportes filtrados\n  const fetchReportes = async filtros => {\n    setLoading(true);\n    setError(null);\n    try {\n      const params = new URLSearchParams(filtros).toString();\n      const res = await fetch(`${API_URL}?${params}`);\n      if (!res.ok) throw new Error('Error al obtener reportes');\n      return await res.json();\n    } catch (err) {\n      setError(err.message);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Exportar reporte (placeholder)\n  const exportarReporte = async (tipo, filtros) => {\n    // Aquí deberías llamar al endpoint real de exportación y descargar el archivo\n    alert(`Exportando reporte a ${tipo.toUpperCase()} (integración real pendiente)`);\n  };\n  return {\n    fetchReportes,\n    exportarReporte,\n    loading,\n    error\n  };\n}\n_s(useReportesApi, \"Iz3ozxQ+abMaAIcGIvU8cKUcBeo=\");\nexport function useReporteGlobalSummary() {\n  _s2();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchSummary = async (desde, hasta) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const res = await apiGet(`/reports/global-summary?desde=${desde}&hasta=${hasta}`);\n      setData(res);\n    } catch (e) {\n      setError(e.message || 'Error al cargar el resumen global');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    data,\n    loading,\n    error,\n    fetchSummary\n  };\n}\n_s2(useReporteGlobalSummary, \"PF2na9M8UJ4bLzW1+Lbyf4L3N00=\");\nexport function useReporteEmpresarioDetallado() {\n  _s3();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchEmpresario = async (empresarioId, desde, hasta) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const res = await apiGet(`/reports/empresario-detallado?empresarioId=${empresarioId}&desde=${desde}&hasta=${hasta}`);\n      setData(res);\n    } catch (e) {\n      setError(e.message || 'Error al cargar el reporte detallado');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    data,\n    loading,\n    error,\n    fetchEmpresario\n  };\n}\n_s3(useReporteEmpresarioDetallado, \"PF2na9M8UJ4bLzW1+Lbyf4L3N00=\");\nexport function useReporteZonaDetallada() {\n  _s4();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchZona = async (zona, desde, hasta) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const res = await apiGet(`/reports/zona-detallada?zona=${encodeURIComponent(zona)}&desde=${desde}&hasta=${hasta}`);\n      setData(res);\n    } catch (e) {\n      setError(e.message || 'Error al cargar el reporte de zona');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    data,\n    loading,\n    error,\n    fetchZona\n  };\n}\n\n/**\r\n * Ejemplo de uso:\r\n *\r\n * const { fetchReportes, exportarReporte, loading, error } = useReportesApi();\r\n *\r\n * useEffect(() => { fetchReportes({ decena: '2024-07-01 al 2024-07-10' }); }, []);\r\n *\r\n * exportarReporte('pdf', { zona: 'JB' });\r\n */\n_s4(useReporteZonaDetallada, \"PF2na9M8UJ4bLzW1+Lbyf4L3N00=\");","map":{"version":3,"names":["useState","apiGet","API_URL","process","env","REACT_APP_API_URL","useReportesApi","_s","loading","setLoading","error","setError","fetchReportes","filtros","params","URLSearchParams","toString","res","fetch","ok","Error","json","err","message","exportarReporte","tipo","alert","toUpperCase","useReporteGlobalSummary","_s2","data","setData","fetchSummary","desde","hasta","e","useReporteEmpresarioDetallado","_s3","fetchEmpresario","empresarioId","useReporteZonaDetallada","_s4","fetchZona","zona","encodeURIComponent"],"sources":["C:/Users/pasaj/Music/pullman-payment-system/frontend/src/hooks/useReportesApi.ts"],"sourcesContent":["import { useState } from 'react';\r\nimport { apiGet } from '../services/api';\r\n\r\nexport interface Reporte {\r\n  decena: string;\r\n  zona: string;\r\n  empresario: string;\r\n  recorridos: number;\r\n  monto: number;\r\n}\r\n\r\n// Cambia esta URL por la de tu backend\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api/reports';\r\n\r\nexport function useReportesApi() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Obtener reportes filtrados\r\n  const fetchReportes = async (filtros: { decena?: string; zona?: string; empresario?: string }): Promise<Reporte[]> => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const params = new URLSearchParams(filtros as any).toString();\r\n      const res = await fetch(`${API_URL}?${params}`);\r\n      if (!res.ok) throw new Error('Error al obtener reportes');\r\n      return await res.json();\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n      return [];\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Exportar reporte (placeholder)\r\n  const exportarReporte = async (tipo: 'pdf' | 'excel', filtros: { decena?: string; zona?: string; empresario?: string }) => {\r\n    // Aquí deberías llamar al endpoint real de exportación y descargar el archivo\r\n    alert(`Exportando reporte a ${tipo.toUpperCase()} (integración real pendiente)`);\r\n  };\r\n\r\n  return {\r\n    fetchReportes,\r\n    exportarReporte,\r\n    loading,\r\n    error,\r\n  };\r\n}\r\n\r\nexport function useReporteGlobalSummary() {\r\n  const [data, setData] = useState<any>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchSummary = async (desde: string, hasta: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const res = await apiGet(`/reports/global-summary?desde=${desde}&hasta=${hasta}`);\r\n      setData(res);\r\n    } catch (e: any) {\r\n      setError(e.message || 'Error al cargar el resumen global');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return { data, loading, error, fetchSummary };\r\n}\r\n\r\nexport function useReporteEmpresarioDetallado() {\r\n  const [data, setData] = useState<any>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchEmpresario = async (empresarioId: number, desde: string, hasta: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const res = await apiGet(`/reports/empresario-detallado?empresarioId=${empresarioId}&desde=${desde}&hasta=${hasta}`);\r\n      setData(res);\r\n    } catch (e: any) {\r\n      setError(e.message || 'Error al cargar el reporte detallado');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return { data, loading, error, fetchEmpresario };\r\n}\r\n\r\nexport function useReporteZonaDetallada() {\r\n  const [data, setData] = useState<any>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchZona = async (zona: string, desde: string, hasta: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const res = await apiGet(`/reports/zona-detallada?zona=${encodeURIComponent(zona)}&desde=${desde}&hasta=${hasta}`);\r\n      setData(res);\r\n    } catch (e: any) {\r\n      setError(e.message || 'Error al cargar el reporte de zona');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return { data, loading, error, fetchZona };\r\n}\r\n\r\n/**\r\n * Ejemplo de uso:\r\n *\r\n * const { fetchReportes, exportarReporte, loading, error } = useReportesApi();\r\n *\r\n * useEffect(() => { fetchReportes({ decena: '2024-07-01 al 2024-07-10' }); }, []);\r\n *\r\n * exportarReporte('pdf', { zona: 'JB' });\r\n */ "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}