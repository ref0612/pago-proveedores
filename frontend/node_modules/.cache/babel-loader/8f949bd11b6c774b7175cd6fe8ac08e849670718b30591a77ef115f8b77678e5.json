{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { apiGet, apiPost } from '../services/api';\nexport const usePrivilegesApi = () => {\n  _s();\n  const [privileges, setPrivileges] = useState([]);\n  const [privilegesByCategory, setPrivilegesByCategory] = useState({});\n  const [categories, setCategories] = useState([]);\n  const [actions, setActions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Obtener todos los privilegios\n  const fetchPrivileges = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await apiGet('/privileges');\n      setPrivileges(response);\n    } catch (err) {\n      setError('Error al cargar privilegios');\n      console.error('Error fetching privileges:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Obtener privilegios agrupados por categoría\n  const fetchPrivilegesByCategory = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await apiGet('/privileges/by-category');\n      setPrivilegesByCategory(response);\n    } catch (err) {\n      setError('Error al cargar privilegios por categoría');\n      console.error('Error fetching privileges by category:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Obtener categorías\n  const fetchCategories = async () => {\n    try {\n      const response = await apiGet('/privileges/categories');\n      setCategories(response);\n    } catch (err) {\n      console.error('Error fetching categories:', err);\n    }\n  };\n\n  // Obtener acciones\n  const fetchActions = async () => {\n    try {\n      const response = await apiGet('/privileges/actions');\n      setActions(response);\n    } catch (err) {\n      console.error('Error fetching actions:', err);\n    }\n  };\n\n  // Obtener privilegios de un rol\n  const fetchRolePrivileges = async role => {\n    try {\n      const response = await apiGet(`/privileges/role/${role}`);\n      return response;\n    } catch (err) {\n      console.error('Error fetching role privileges:', err);\n      return {};\n    }\n  };\n\n  // Actualizar privilegios de un rol\n  const updateRolePrivileges = async (role, privileges) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await apiPost(`/privileges/role/${role}`, privileges);\n      return response;\n    } catch (err) {\n      setError('Error al actualizar privilegios del rol');\n      console.error('Error updating role privileges:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Verificar si un rol tiene un privilegio\n  const checkPrivilege = async (role, privilegeName) => {\n    try {\n      const response = await apiGet(`/privileges/check/${role}/${privilegeName}`);\n      return response.hasPrivilege;\n    } catch (err) {\n      console.error('Error checking privilege:', err);\n      return false;\n    }\n  };\n\n  // Inicializar privilegios por defecto\n  const initializePrivileges = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await apiPost('/privileges/initialize', {});\n      await fetchPrivileges();\n      await fetchPrivilegesByCategory();\n      return response;\n    } catch (err) {\n      setError('Error al inicializar privilegios');\n      console.error('Error initializing privileges:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Crear nuevo privilegio\n  const createPrivilege = async privilege => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await apiPost('/privileges', privilege);\n      await fetchPrivileges();\n      await fetchPrivilegesByCategory();\n      return response;\n    } catch (err) {\n      setError('Error al crear privilegio');\n      console.error('Error creating privilege:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Actualizar privilegio\n  const updatePrivilege = async (id, privilege) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await apiPost(`/privileges/${id}`, privilege);\n      await fetchPrivileges();\n      await fetchPrivilegesByCategory();\n      return response;\n    } catch (err) {\n      setError('Error al actualizar privilegio');\n      console.error('Error updating privilege:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Eliminar privilegio\n  const deletePrivilege = async id => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await apiPost(`/privileges/${id}/delete`, {});\n      await fetchPrivileges();\n      await fetchPrivilegesByCategory();\n      return response;\n    } catch (err) {\n      setError('Error al eliminar privilegio');\n      console.error('Error deleting privilege:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Cargar datos iniciales\n  useEffect(() => {\n    fetchPrivileges();\n    fetchPrivilegesByCategory();\n    fetchCategories();\n    fetchActions();\n  }, []);\n  return {\n    privileges,\n    privilegesByCategory,\n    categories,\n    actions,\n    loading,\n    error,\n    fetchPrivileges,\n    fetchPrivilegesByCategory,\n    fetchRolePrivileges,\n    updateRolePrivileges,\n    checkPrivilege,\n    initializePrivileges,\n    createPrivilege,\n    updatePrivilege,\n    deletePrivilege\n  };\n};\n_s(usePrivilegesApi, \"pfJj4SVYyx9nR+xyfMFm1nFjOvg=\");","map":{"version":3,"names":["useState","useEffect","apiGet","apiPost","usePrivilegesApi","_s","privileges","setPrivileges","privilegesByCategory","setPrivilegesByCategory","categories","setCategories","actions","setActions","loading","setLoading","error","setError","fetchPrivileges","response","err","console","fetchPrivilegesByCategory","fetchCategories","fetchActions","fetchRolePrivileges","role","updateRolePrivileges","checkPrivilege","privilegeName","hasPrivilege","initializePrivileges","createPrivilege","privilege","updatePrivilege","id","deletePrivilege"],"sources":["C:/Users/pasaj/Music/pullman-payment-system/frontend/src/hooks/usePrivilegesApi.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { apiGet, apiPost } from '../services/api';\r\n\r\nexport interface Privilege {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  category: string;\r\n  action: string;\r\n  enabled: boolean;\r\n}\r\n\r\nexport interface RolePrivileges {\r\n  [key: string]: boolean;\r\n}\r\n\r\nexport const usePrivilegesApi = () => {\r\n  const [privileges, setPrivileges] = useState<Privilege[]>([]);\r\n  const [privilegesByCategory, setPrivilegesByCategory] = useState<{[key: string]: Privilege[]}>({});\r\n  const [categories, setCategories] = useState<string[]>([]);\r\n  const [actions, setActions] = useState<string[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Obtener todos los privilegios\r\n  const fetchPrivileges = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await apiGet('/privileges');\r\n      setPrivileges(response);\r\n    } catch (err) {\r\n      setError('Error al cargar privilegios');\r\n      console.error('Error fetching privileges:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Obtener privilegios agrupados por categoría\r\n  const fetchPrivilegesByCategory = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await apiGet('/privileges/by-category');\r\n      setPrivilegesByCategory(response);\r\n    } catch (err) {\r\n      setError('Error al cargar privilegios por categoría');\r\n      console.error('Error fetching privileges by category:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Obtener categorías\r\n  const fetchCategories = async () => {\r\n    try {\r\n      const response = await apiGet('/privileges/categories');\r\n      setCategories(response);\r\n    } catch (err) {\r\n      console.error('Error fetching categories:', err);\r\n    }\r\n  };\r\n\r\n  // Obtener acciones\r\n  const fetchActions = async () => {\r\n    try {\r\n      const response = await apiGet('/privileges/actions');\r\n      setActions(response);\r\n    } catch (err) {\r\n      console.error('Error fetching actions:', err);\r\n    }\r\n  };\r\n\r\n  // Obtener privilegios de un rol\r\n  const fetchRolePrivileges = async (role: string): Promise<RolePrivileges> => {\r\n    try {\r\n      const response = await apiGet(`/privileges/role/${role}`);\r\n      return response;\r\n    } catch (err) {\r\n      console.error('Error fetching role privileges:', err);\r\n      return {};\r\n    }\r\n  };\r\n\r\n  // Actualizar privilegios de un rol\r\n  const updateRolePrivileges = async (role: string, privileges: RolePrivileges) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await apiPost(`/privileges/role/${role}`, privileges);\r\n      return response;\r\n    } catch (err) {\r\n      setError('Error al actualizar privilegios del rol');\r\n      console.error('Error updating role privileges:', err);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Verificar si un rol tiene un privilegio\r\n  const checkPrivilege = async (role: string, privilegeName: string): Promise<boolean> => {\r\n    try {\r\n      const response = await apiGet(`/privileges/check/${role}/${privilegeName}`);\r\n      return response.hasPrivilege;\r\n    } catch (err) {\r\n      console.error('Error checking privilege:', err);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Inicializar privilegios por defecto\r\n  const initializePrivileges = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await apiPost('/privileges/initialize', {});\r\n      await fetchPrivileges();\r\n      await fetchPrivilegesByCategory();\r\n      return response;\r\n    } catch (err) {\r\n      setError('Error al inicializar privilegios');\r\n      console.error('Error initializing privileges:', err);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Crear nuevo privilegio\r\n  const createPrivilege = async (privilege: Omit<Privilege, 'id'>) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await apiPost('/privileges', privilege);\r\n      await fetchPrivileges();\r\n      await fetchPrivilegesByCategory();\r\n      return response;\r\n    } catch (err) {\r\n      setError('Error al crear privilegio');\r\n      console.error('Error creating privilege:', err);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Actualizar privilegio\r\n  const updatePrivilege = async (id: number, privilege: Partial<Privilege>) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await apiPost(`/privileges/${id}`, privilege);\r\n      await fetchPrivileges();\r\n      await fetchPrivilegesByCategory();\r\n      return response;\r\n    } catch (err) {\r\n      setError('Error al actualizar privilegio');\r\n      console.error('Error updating privilege:', err);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Eliminar privilegio\r\n  const deletePrivilege = async (id: number) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await apiPost(`/privileges/${id}/delete`, {});\r\n      await fetchPrivileges();\r\n      await fetchPrivilegesByCategory();\r\n      return response;\r\n    } catch (err) {\r\n      setError('Error al eliminar privilegio');\r\n      console.error('Error deleting privilege:', err);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Cargar datos iniciales\r\n  useEffect(() => {\r\n    fetchPrivileges();\r\n    fetchPrivilegesByCategory();\r\n    fetchCategories();\r\n    fetchActions();\r\n  }, []);\r\n\r\n  return {\r\n    privileges,\r\n    privilegesByCategory,\r\n    categories,\r\n    actions,\r\n    loading,\r\n    error,\r\n    fetchPrivileges,\r\n    fetchPrivilegesByCategory,\r\n    fetchRolePrivileges,\r\n    updateRolePrivileges,\r\n    checkPrivilege,\r\n    initializePrivileges,\r\n    createPrivilege,\r\n    updatePrivilege,\r\n    deletePrivilege,\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}