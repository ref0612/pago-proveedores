{"ast":null,"code":"// Servicio para manejar las peticiones HTTP con autenticación\nconst API_BASE_URL = 'http://localhost:8080/api';\n\n// Función para obtener las credenciales de autenticación\nconst getAuthHeaders = () => {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n\n  // Temporalmente comentado para probar sin autenticación\n  // const token = localStorage.getItem('authToken');\n  // if (token) {\n  //   headers['Authorization'] = `Bearer ${token}`;\n  // }\n\n  return headers;\n};\n\n// Función para obtener las credenciales para archivos (sin Content-Type)\nconst getFileAuthHeaders = () => {\n  const headers = {};\n\n  // Temporalmente comentado para probar sin autenticación\n  // const token = localStorage.getItem('authToken');\n  // if (token) {\n  //   headers['Authorization'] = `Bearer ${token}`;\n  // }\n\n  return headers;\n};\n\n// Función genérica para peticiones GET\nexport const apiGet = async endpoint => {\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n    method: 'GET',\n    headers: getAuthHeaders()\n  });\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n  return response.json();\n};\n\n// Función genérica para peticiones POST\nexport const apiPost = async (endpoint, data) => {\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n    method: 'POST',\n    headers: getAuthHeaders(),\n    body: data ? JSON.stringify(data) : undefined\n  });\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n  return response.json();\n};\n\n// Función específica para subir archivos CSV\nexport const uploadCsvFile = async file => {\n  const formData = new FormData();\n  formData.append('file', file);\n  console.log('Enviando archivo al backend:', file.name, 'Tamaño:', file.size);\n  const response = await fetch(`${API_BASE_URL}/trips/import-csv`, {\n    method: 'POST',\n    headers: getFileAuthHeaders(),\n    body: formData\n  });\n  console.log('Response status:', response.status);\n  console.log('Response headers:', response.headers);\n  if (!response.ok) {\n    const errorText = await response.text();\n    let errorMessage = `Error en la importación: ${response.status}`;\n    if (response.status === 403) {\n      errorMessage = `Error 403 - Acceso denegado. Posibles causas:\\n- Problema de CORS\\n- Configuración de seguridad incorrecta\\n- Backend no disponible\\n\\nDetalles: ${errorText}`;\n    } else if (response.status === 413) {\n      errorMessage = `Error 413 - Archivo demasiado grande. El archivo excede el límite permitido.\\n\\nDetalles: ${errorText}`;\n    } else if (response.status === 500) {\n      errorMessage = `Error 500 - Error interno del servidor.\\n\\nDetalles: ${errorText}`;\n    } else {\n      errorMessage = `Error ${response.status} - ${errorText}`;\n    }\n    console.error('Error response:', errorMessage);\n    throw new Error(errorMessage);\n  }\n  return response.json();\n};\n\n// Funciones específicas para viajes\nexport const tripsApi = {\n  getAll: async () => {\n    const response = await apiGet('/trips');\n    return response.content || response;\n  },\n  getAllPaginated: (page = 0, size = 1000) => apiGet(`/trips/paginated?page=${page}&size=${size}`),\n  getAllComplete: async () => {\n    console.log('Cargando todos los viajes...');\n    const allTrips = [];\n    let page = 0;\n    let last = false;\n    while (!last) {\n      console.log(`Cargando página ${page}...`);\n      const response = await apiGet(`/trips/paginated?page=${page}&size=1000`);\n      allTrips.push(...response.content);\n      last = response.last;\n      page++;\n    }\n    console.log(`Total de viajes cargados: ${allTrips.length}`);\n    return allTrips;\n  },\n  getById: id => apiGet(`/trips/${id}`),\n  create: trip => apiPost('/trips', trip),\n  update: (id, trip) => apiPost(`/trips/${id}`, trip),\n  delete: id => apiPost(`/trips/${id}/delete`),\n  getByDate: date => apiGet(`/trips/date/${date}`),\n  getByOrigin: origin => apiGet(`/trips/origin/${origin}`),\n  getByDestination: destination => apiGet(`/trips/destination/${destination}`),\n  getByCompany: company => apiGet(`/trips/company/${company}`),\n  getByDriver: driver => apiGet(`/trips/driver/${driver}`),\n  getByStatus: status => apiGet(`/trips/status/${status}`),\n  getRevenueByDate: date => apiGet(`/trips/revenue/date/${date}`),\n  getRevenueByCompany: date => apiGet(`/trips/revenue/company/${date}`),\n  getRevenueByRoute: date => apiGet(`/trips/revenue/route/${date}`),\n  getStats: () => apiGet('/trips/stats'),\n  importCsv: uploadCsvFile\n};\nexport const productionsApi = {\n  getAll: () => apiGet('/productions'),\n  getAprobadas: () => apiGet('/productions?validado=true')\n  // Puedes agregar más funciones según sea necesario\n};\nexport const liquidationsApi = {\n  getAll: () => apiGet('/liquidations'),\n  getById: id => apiGet(`/liquidations/${id}`),\n  registrarPago: id => apiPost(`/liquidations/${id}/registrar-pago`),\n  aprobar: id => apiPost(`/liquidations/${id}/aprobar`)\n};","map":{"version":3,"names":["API_BASE_URL","getAuthHeaders","headers","getFileAuthHeaders","apiGet","endpoint","response","fetch","method","ok","Error","status","json","apiPost","data","body","JSON","stringify","undefined","uploadCsvFile","file","formData","FormData","append","console","log","name","size","errorText","text","errorMessage","error","tripsApi","getAll","content","getAllPaginated","page","getAllComplete","allTrips","last","push","length","getById","id","create","trip","update","delete","getByDate","date","getByOrigin","origin","getByDestination","destination","getByCompany","company","getByDriver","driver","getByStatus","getRevenueByDate","getRevenueByCompany","getRevenueByRoute","getStats","importCsv","productionsApi","getAprobadas","liquidationsApi","registrarPago","aprobar"],"sources":["C:/Users/pasaj/Music/pullman-payment-system/frontend/src/services/api.ts"],"sourcesContent":["// Servicio para manejar las peticiones HTTP con autenticación\r\nconst API_BASE_URL = 'http://localhost:8080/api';\r\n\r\n// Función para obtener las credenciales de autenticación\r\nconst getAuthHeaders = () => {\r\n  const headers: Record<string, string> = {\r\n    'Content-Type': 'application/json',\r\n  };\r\n  \r\n  // Temporalmente comentado para probar sin autenticación\r\n  // const token = localStorage.getItem('authToken');\r\n  // if (token) {\r\n  //   headers['Authorization'] = `Bearer ${token}`;\r\n  // }\r\n  \r\n  return headers;\r\n};\r\n\r\n// Función para obtener las credenciales para archivos (sin Content-Type)\r\nconst getFileAuthHeaders = () => {\r\n  const headers: Record<string, string> = {};\r\n  \r\n  // Temporalmente comentado para probar sin autenticación\r\n  // const token = localStorage.getItem('authToken');\r\n  // if (token) {\r\n  //   headers['Authorization'] = `Bearer ${token}`;\r\n  // }\r\n  \r\n  return headers;\r\n};\r\n\r\n// Función genérica para peticiones GET\r\nexport const apiGet = async (endpoint: string) => {\r\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n    method: 'GET',\r\n    headers: getAuthHeaders(),\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    throw new Error(`HTTP error! status: ${response.status}`);\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n\r\n// Función genérica para peticiones POST\r\nexport const apiPost = async (endpoint: string, data?: any) => {\r\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n    method: 'POST',\r\n    headers: getAuthHeaders(),\r\n    body: data ? JSON.stringify(data) : undefined,\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    throw new Error(`HTTP error! status: ${response.status}`);\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n\r\n// Función específica para subir archivos CSV\r\nexport const uploadCsvFile = async (file: File) => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  \r\n  console.log('Enviando archivo al backend:', file.name, 'Tamaño:', file.size);\r\n  \r\n  const response = await fetch(`${API_BASE_URL}/trips/import-csv`, {\r\n    method: 'POST',\r\n    headers: getFileAuthHeaders(),\r\n    body: formData,\r\n  });\r\n  \r\n  console.log('Response status:', response.status);\r\n  console.log('Response headers:', response.headers);\r\n  \r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    let errorMessage = `Error en la importación: ${response.status}`;\r\n    \r\n    if (response.status === 403) {\r\n      errorMessage = `Error 403 - Acceso denegado. Posibles causas:\\n- Problema de CORS\\n- Configuración de seguridad incorrecta\\n- Backend no disponible\\n\\nDetalles: ${errorText}`;\r\n    } else if (response.status === 413) {\r\n      errorMessage = `Error 413 - Archivo demasiado grande. El archivo excede el límite permitido.\\n\\nDetalles: ${errorText}`;\r\n    } else if (response.status === 500) {\r\n      errorMessage = `Error 500 - Error interno del servidor.\\n\\nDetalles: ${errorText}`;\r\n    } else {\r\n      errorMessage = `Error ${response.status} - ${errorText}`;\r\n    }\r\n    \r\n    console.error('Error response:', errorMessage);\r\n    throw new Error(errorMessage);\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n\r\n// Funciones específicas para viajes\r\nexport const tripsApi = {\r\n  getAll: async () => {\r\n    const response = await apiGet('/trips');\r\n    return response.content || response;\r\n  },\r\n  getAllPaginated: (page = 0, size = 1000) => apiGet(`/trips/paginated?page=${page}&size=${size}`),\r\n  getAllComplete: async () => {\r\n    console.log('Cargando todos los viajes...');\r\n    const allTrips: any[] = [];\r\n    let page = 0;\r\n    let last = false;\r\n    \r\n    while (!last) {\r\n      console.log(`Cargando página ${page}...`);\r\n      const response = await apiGet(`/trips/paginated?page=${page}&size=1000`);\r\n      allTrips.push(...response.content);\r\n      last = response.last;\r\n      page++;\r\n    }\r\n    \r\n    console.log(`Total de viajes cargados: ${allTrips.length}`);\r\n    return allTrips;\r\n  },\r\n  getById: (id: number) => apiGet(`/trips/${id}`),\r\n  create: (trip: any) => apiPost('/trips', trip),\r\n  update: (id: number, trip: any) => apiPost(`/trips/${id}`, trip),\r\n  delete: (id: number) => apiPost(`/trips/${id}/delete`),\r\n  getByDate: (date: string) => apiGet(`/trips/date/${date}`),\r\n  getByOrigin: (origin: string) => apiGet(`/trips/origin/${origin}`),\r\n  getByDestination: (destination: string) => apiGet(`/trips/destination/${destination}`),\r\n  getByCompany: (company: string) => apiGet(`/trips/company/${company}`),\r\n  getByDriver: (driver: string) => apiGet(`/trips/driver/${driver}`),\r\n  getByStatus: (status: string) => apiGet(`/trips/status/${status}`),\r\n  getRevenueByDate: (date: string) => apiGet(`/trips/revenue/date/${date}`),\r\n  getRevenueByCompany: (date: string) => apiGet(`/trips/revenue/company/${date}`),\r\n  getRevenueByRoute: (date: string) => apiGet(`/trips/revenue/route/${date}`),\r\n  getStats: () => apiGet('/trips/stats'),\r\n  importCsv: uploadCsvFile,\r\n};\r\n\r\nexport const productionsApi = {\r\n  getAll: () => apiGet('/productions'),\r\n  getAprobadas: () => apiGet('/productions?validado=true'),\r\n  // Puedes agregar más funciones según sea necesario\r\n};\r\n\r\nexport const liquidationsApi = {\r\n  getAll: () => apiGet('/liquidations'),\r\n  getById: (id: number) => apiGet(`/liquidations/${id}`),\r\n  registrarPago: (id: number) => apiPost(`/liquidations/${id}/registrar-pago`),\r\n  aprobar: (id: number) => apiPost(`/liquidations/${id}/aprobar`),\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}